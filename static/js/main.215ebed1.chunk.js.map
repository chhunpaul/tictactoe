{"version":3,"sources":["TicTacToe.js","App.js","serviceWorker.js","index.js"],"names":["TicTacToe","props","createRef","element","sections","push","id","state","board","winner","gameCompleted","handleClick","bind","botMove","this","Math","floor","random","length","splice","indexOf","calculateWinner","e","targetID","target","setState","data","d","every","val","_checkForWinner","rowWinner","checkForRowWinner","columnWinner","checkForColumnWinner","diagonalWinner","checkForDiagonalWinner","width","height","onClick","ref","owner","rowIndex","columnIndex","React","Component","Section","sectionHeight","sectionWidth","style","stroke","x1","y1","x2","y2","styles","fill","transform","createX","createO","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.215ebed1.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class TicTacToe extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {board: {}, winner: \"\", gameCompleted: false};\n        this.sections = [];\n        this.handleClick = this.handleClick.bind(this);\n        this.createRef = this.createRef.bind(this);\n    }\n\n    createRef = element => {\n        this.sections.push(element.props.id)\n    };\n\n    botMove(state) {\n        const botMove = this.sections[Math.floor(Math.random() * this.sections.length)];\n        this.sections.splice(this.sections.indexOf(botMove), 1);\n        state.board[botMove] = \"bot\";\n\n        const winner = this.calculateWinner(state.board);\n        if (winner) {\n            state.winner = winner;\n        }\n    }\n\n    handleClick(e) {\n        const state = this.state;\n        if (state.winner) {\n            return\n        }\n\n        const targetID = e.target.id;\n\n        if (this.sections.indexOf(targetID) < 0) {\n            return\n        }\n\n        state.board[targetID] = \"player\";\n        this.sections.splice(this.sections.indexOf(targetID), 1);\n        const winner = this.calculateWinner(state.board);\n        if (winner) {\n            state.winner = winner;\n        } else {\n            this.botMove(state);\n        }\n        if (this.sections.length === 0) {\n            state.gameCompleted = true;\n        }\n        this.setState(state)\n    }\n\n    _checkForWinner(data) {\n        for (const d of data) {\n            if (d.every(val => val === \"player\")) {\n                return \"player\"\n            }\n            if (d.every(val => val === \"bot\")) {\n                return \"bot\"\n            }\n        }\n        return \"\"\n    }\n\n    checkForRowWinner(board) {\n        return this._checkForWinner([\n            [board[\"R0_C0\"], board[\"R0_C1\"], board[\"R0_C2\"]],\n            [board[\"R1_C0\"], board[\"R1_C1\"], board[\"R1_C2\"]],\n            [board[\"R2_C0\"], board[\"R2_C1\"], board[\"R2_C2\"]],\n        ]);\n    }\n\n    checkForColumnWinner(board) {\n        return this._checkForWinner([\n            [board[\"R0_C0\"], board[\"R1_C0\"], board[\"R2_C0\"]],\n            [board[\"R0_C1\"], board[\"R1_C1\"], board[\"R2_C1\"]],\n            [board[\"R0_C2\"], board[\"R1_C2\"], board[\"R2_C2\"]],\n        ]);\n    }\n\n    checkForDiagonalWinner(board) {\n        return this._checkForWinner([\n            [board[\"R0_C0\"], board[\"R1_C1\"], board[\"R2_C2\"]],\n            [board[\"R0_C2\"], board[\"R1_C1\"], board[\"R2_C0\"]],\n        ]);\n    }\n\n    calculateWinner(board) {\n        const rowWinner = this.checkForRowWinner(board);\n        if (rowWinner) {\n            return rowWinner\n        }\n        const columnWinner = this.checkForColumnWinner(board);\n        if (columnWinner) {\n            return columnWinner\n        }\n        const diagonalWinner = this.checkForDiagonalWinner(board);\n        if (diagonalWinner) {\n            return diagonalWinner\n        }\n        return \"\"\n    }\n\n    render() {\n        return (\n            <div>\n                <svg width=\"300\" height=\"300\" onClick={this.handleClick}> :\n                    <Section ref={this.createRef} id=\"R0_C0\" owner={this.state.board[\"R0_C0\"]} rowIndex={0}\n                             columnIndex={0}/>\n                    <Section ref={this.createRef} id=\"R0_C1\" owner={this.state.board[\"R0_C1\"]} rowIndex={0}\n                             columnIndex={1}/>\n                    <Section ref={this.createRef} id=\"R0_C2\" owner={this.state.board[\"R0_C2\"]} rowIndex={0}\n                             columnIndex={2}/>\n                    <Section ref={this.createRef} id=\"R1_C0\" owner={this.state.board[\"R1_C0\"]} rowIndex={1}\n                             columnIndex={0}/>\n                    <Section ref={this.createRef} id=\"R1_C1\" owner={this.state.board[\"R1_C1\"]} rowIndex={1}\n                             columnIndex={1}/>\n                    <Section ref={this.createRef} id=\"R1_C2\" owner={this.state.board[\"R1_C2\"]} rowIndex={1}\n                             columnIndex={2}/>\n                    <Section ref={this.createRef} id=\"R2_C0\" owner={this.state.board[\"R2_C0\"]} rowIndex={2}\n                             columnIndex={0}/>\n                    <Section ref={this.createRef} id=\"R2_C1\" owner={this.state.board[\"R2_C1\"]} rowIndex={2}\n                             columnIndex={1}/>\n                    <Section ref={this.createRef} id=\"R2_C2\" owner={this.state.board[\"R2_C2\"]} rowIndex={2}\n                             columnIndex={2}/>\n                </svg>\n                <div>\n                    {this.state.winner === \"player\" ? \"You win!\" : \"\"}\n                    {this.state.winner === \"bot\" ? \"You lose!\" : \"\"}\n                    {this.state.winner === \"\" && this.state.gameCompleted === true ? \"Draw!\" : \"\"}\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Section extends React.Component {\n    constructor(props) {\n        super(props);\n        this.sectionHeight = 100;\n        this.sectionWidth = 100;\n        this.rowIndex = props.rowIndex;\n        this.columnIndex = props.columnIndex;\n    }\n\n    createX() {\n        return (\n            <g style={{stroke: \"#FFF\"}}>\n                <line x1=\"20\" y1=\"20\" x2=\"80\" y2=\"80\"></line>\n                <line x1=\"20\" y1=\"80\" x2=\"80\" y2=\"20\"></line>\n            </g>\n        )\n    }\n\n    // to do make it draw a circle instead?\n    createO() {\n        return (\n            <g style={{stroke: \"#ff0000\"}}>\n                <line x1=\"20\" y1=\"20\" x2=\"80\" y2=\"80\"></line>\n                <line x1=\"20\" y1=\"80\" x2=\"80\" y2=\"20\"></line>\n            </g>\n        )\n    }\n\n    render() {\n        const styles = {\n            fill: \"#14bdac\",\n            transform: `translate(${this.columnIndex * this.sectionHeight}px, ${this.rowIndex * this.sectionWidth}px)`,\n        };\n        const id = `R${this.rowIndex}_C${this.columnIndex}`;\n        return (\n            <g style={styles}>\n                <rect id={id} width={this.sectionWidth} height={this.sectionHeight}/>\n                {this.props.owner === \"player\" ? this.createX() : \"\"}\n                {this.props.owner === \"bot\" ? this.createO() : \"\"}\n            </g>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport TicTacToe from './TicTacToe'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n        <TicTacToe />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}